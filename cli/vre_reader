#!/usr/bin/env python3
"""vre_reader tool -- iterates over a directory output by vre (in the --output_path argument)"""
from pathlib import Path
from argparse import ArgumentParser, Namespace
from vre.readers import MultiTaskDataset
from vre.representations import build_representations_from_cfg, add_external_representations
from vre.utils import abs_path
from omegaconf import OmegaConf
from pprint import pprint
from torch.utils.data import DataLoader
import random
import numpy as np

def get_args() -> Namespace:
    """Cli args"""
    parser = ArgumentParser()
    parser.add_argument("dataset_path", type=abs_path)
    parser.add_argument("config_path", type=abs_path)
    parser.add_argument("--external_representations", "-I", nargs="+", default=[],
                        help="Path to external reprs. Format: /path/to/file.py:fn_name. fn -> {str: Representation}")
    args = parser.parse_args()
    return args

def main(args: Namespace):
    """main fn"""
    cfg = OmegaConf.to_container(OmegaConf.load(args.config_path), resolve=True)
    representations = build_representations_from_cfg(cfg=cfg)
    if len(args.external_representations) > 0:
        for external_path in args.external_representations:
            representations = add_external_representations(representations, external_path, cfg)

    reader = MultiTaskDataset(args.dataset_path, task_names=list(representations.keys()),
                              task_types=representations, handle_missing_data="fill_nan",
                              normalization="min_max", cache_task_stats=True)
    print(reader)

    print("== Shapes ==")
    pprint(reader.data_shape)

    print("== Random loaded item ==")
    rand_ix = random.randint(0, len(reader) - 1)
    data, name, repr_names = reader[rand_ix] # get a random item
    pprint({k: v for k, v in data.items()})

    # img_data = {}
    # for k, v in data.items():
    #     img_data[k] = reader.name_to_task[k].plot_fn(v) if v is not None else np.zeros((*reader.data_shape[k][0:2], 3))

    # print("== Random loaded batch ==")
    # batch_data, name, repr_names = reader[rand_ix: min(len(reader), rand_ix + 5)] # get a random batch
    # pprint({k: v for k, v in batch_data.items()}) # Nones are converted to 0s automagically

    # print("== Random loaded batch using torch DataLoader ==")
    # loader = DataLoader(reader, collate_fn=reader.collate_fn, batch_size=5, shuffle=True)
    # batch_data, name, repr_names = next(iter(loader))
    # pprint({k: v for k, v in batch_data.items()}) # Nones are converted to 0s automagically

if __name__ == "__main__":
    main(get_args())
