#!/usr/bin/env python3
from argparse import ArgumentParser
from pathlib import Path
import pims
from media_processing_lib.image import image_add_title, image_read, image_write
from media_processing_lib.collage_maker import collage_fn
from vre.logger import logger
from natsort import natsorted
import numpy as np
from tqdm import tqdm


def get_args():
    parser = ArgumentParser()
    parser.add_argument("vre_export_dir", type=lambda p: Path(p).absolute(), help="Path to the dir where VRE exported")
    parser.add_argument("--output_path", "-o", required=False, help="Path to the collage is stored")
    parser.add_argument("--no_video", action="store_true")
    parser.add_argument("--resolution_dir", help="If more png exports are done by VRE, this will pin one resolution")
    parser.add_argument("--overwrite", action="store_true")
    parser.add_argument("--fps", type=int)
    # TODO: add order of collage
    args = parser.parse_args()

    if args.output_path is None:
        args.output_path = args.vre_export_dir / "collage"
        logger.warning(f"--output_path not provided, defaulting to '{args.output_path}'")
    args.output_path = Path(args.output_path).absolute()
    assert not args.output_path.exists() or args.overwrite, f"Output path '{args.output_path}' exists. Use --overwrite."
    if not args.no_video:
        assert args.fps, "--fps must be provided when exporting a video."
    return args


def resolve_files(vre_export_dir: Path, resolution_dir: str = None) -> dict[str, list[Path]]:
    found_dirs = [x / "png" for x in vre_export_dir.iterdir() if (x / "png").exists()]
    repr_files = {}
    for repr_png_dir in found_dirs:
        files = natsorted([x for x in repr_png_dir.iterdir()], key=lambda p: p.name)
        repr_files[repr_png_dir.parent.name] = files

    name_files = np.array([[x.name for x in v] for v in repr_files.values()])
    assert (name_files == name_files[0]).all(), f"Not all npz files are named identically: {name_files}"
    n_files = {k: len(v) for k, v in repr_files.items()}
    assert np.std(list(n_files.values())) == 0, f"Not all png files have the same number of images: {n_files}"
    logger.info(f"Returning {n_files[found_dirs[0].parent.name]} images from {len(n_files)} representations.")
    return repr_files


def main():
    args = get_args()
    logger.info(f"VRE pngs dir: {args.vre_export_dir}")
    logger.info(f"Output dir: {args.output_path}")
    logger.info(f"Export video: {not args.no_video} {'' if args.no_video else args.output_path / 'collage.mp4'}")

    found_files = resolve_files(args.vre_export_dir, args.resolution_dir)
    keys = found_files.keys()
    # convert [[key1_0, key1_1], [key2_0, key2_1]] to [[key1_0, key2_0], [key1_1, key2_1]]
    values = np.array(list(found_files.values())).T
    args.output_path.mkdir(parents=True, exist_ok=True)
    for current_frame_paths in tqdm(values, desc="collage images"):
        # export the png with the same name as all the other png from which it is constructed
        name = current_frame_paths[0].stem
        current_frames = [image_read(x) for x in current_frame_paths]
        titled_frames = [image_add_title(img, title) for img, title in zip(current_frames, keys)]
        img = collage_fn(titled_frames, pad_right=10, pad_bottom=10)
        image_write(img, args.output_path / f"{name}.png")

    if not args.no_video:
        raise NotImplementedError("TODO")
        backend = DiskBackend([x for x in args.output_path.iterdir()])
        MPLVideo(backend, fps=args.fps).save(args.output_path / "collage.mp4")


if __name__ == "__main__":
    main()
