#!/usr/bin/env python3
from argparse import ArgumentParser
from typing import List
from pathlib import Path
import numpy as np
import pims
from vre import VRE
from vre.utils import FakeVideo
from vre.representations import build_representations_from_cfg
from vre.logger import logger
from omegaconf import OmegaConf
from media_processing_lib.image import image_read

def get_args():
    parser = ArgumentParser()
    parser.add_argument("video_path", help="Path to the scene video we are processing")
    parser.add_argument("--output_path", "-o", required=True,
                        help="Path to the output directory where representations are stored")
    parser.add_argument("--cfg_path", required=True, help="Path to global YAML cfg file")
    parser.add_argument("--start_frame", type=int, default=0, help="The first frame. If not set, defaults to first.")
    parser.add_argument("--end_frame", type=int, help="End frame. If not set, defaults to length of video")
    parser.add_argument("--output_dir_exist_mode", choices=["overwrite", "skip_computed", "raise"])
    parser.add_argument("--frame_rate", type=int, help="For a directory of images. Required for optical flow")
    parser.add_argument("--batch_size", type=int)

    args = parser.parse_args()

    args.video_path = Path(args.video_path).absolute()
    args.output_path = Path(args.output_path).absolute()
    if args.cfg_path is not None:
        args.cfg_path = Path(args.cfg_path).absolute()
    return args


def get_cfg():
    args = get_args()
    cfg = OmegaConf.load(open(args.cfg_path, "r"))

    def _update_cfg_from_args(cfg, args, items: List[str]):
        for item in items:
            if getattr(args, item) is None:
                continue
            cfg[item] = getattr(args, item)
            logger.warning(f"--{item} is set to '{cfg[item]}'. Will update the cfg value")
        return cfg

    cfg.vre = _update_cfg_from_args(cfg.vre, args, ["start_frame", "end_frame", "output_dir_exist_mode", "batch_size"])
    return args, cfg


def main():
    args, cfg = get_cfg()
    if args.video_path.is_dir():
        data = np.array([image_read(f) for f in args.video_path.glob("*.png")], dtype=np.uint8)
        logger.info(f"--video_path is a directory. Assuming a directory of images. Found {len(data)} images.")
        video = FakeVideo(data, frame_rate=args.frame_rate)
    else:
        video = pims.Video(args.video_path)
    representations = build_representations_from_cfg(cfg.representations)
    vre = VRE(video, representations)
    representations_setup = {r: cfg.representations[r].get("vre_parameters", {}) for r in representations.keys()}
    vre(args.output_path, **cfg.vre, representations_setup=representations_setup)

if __name__ == "__main__":
    main()
