vre:
  start_frame: ${oc.env:VRE_START_IX}
  end_frame: ${oc.env:VRE_END_IX,null}
  output_resolution: [240, 426]
  export_raw: True
  export_npy: True
  export_png: True

representations:
  rgb:
    type: default
    method: rgb
    dependencies: []
    parameters: {}

  hsv:
    type: default
    method: hsv
    dependencies: []
    parameters: {}

  halftone1:
    type: soft-segmentation
    method: python-halftone
    dependencies: []
    parameters:
      sample: 3
      scale: 1
      percentage: 91
      angles: [0, 15, 30, 45]
      antialias: False
      resolution: [240, 426]

  edges canny:
    type: edges
    method: canny
    dependencies: []
    parameters:
      threshold1: 100
      threshold2: 200
      aperture_size: 3
      l2_gradient: True

  softseg kmeans:
    type: soft-segmentation
    method: kmeans
    dependencies: []
    parameters:
      n_clusters: 6
      epsilon: 2
      max_iterations: 10
      attempts: 3

  softseg gb:
    type: soft-segmentation
    method: generalized_boundaries
    dependencies: []
    parameters:
      useFiltering: True
      adjustToRGB: True
      maxChannels: 3

  semantic safeuav torch:
    type: semantic
    method: safeuav
    dependencies: []
    parameters:
      device: ${oc.env:VRE_DEVICE,cpu}
      weights_file: safeuav_semantic_0956_pytorch.ckpt
      train_height: 240
      train_width: 428
      num_classes: 8
      color_map: [[0, 255, 0], [0, 127, 0], [255, 255, 0], [255, 255, 255],
                  [255, 0, 0], [0, 0, 255], [0, 255, 255], [127, 127, 63]]

  edges dexined:
    type: edges
    method: dexined
    dependencies: []
    parameters:
      device: ${oc.env:VRE_DEVICE,cpu}

  opticalflow rife:
    type: optical-flow
    method: rife
    dependencies: []
    parameters:
      compute_backward_flow: False
      device: ${oc.env:VRE_DEVICE,cpu}

  depth odoflow (rife):
    type: depth
    method: odo-flow
    dependencies: [opticalflow rife]
    parameters:
      velocities_path: DJI_0956_velocities.npz
      linearAngVelCorrection: True
      focus_correction: True
      cosine_correction_scipy: False
      cosine_correction_GD: True
      sensor_fov: 75
      sensor_width: 3840
      sensor_height: 2160
      min_depth_meters: 0
      max_depth_meters: 400

  normals svd (rife):
    type: normals
    method: depth-svd
    dependencies: [depth odoflow (rife)]
    parameters:
      sensor_fov: 75
      sensor_width: 3840
      sensor_height: 2160
      window_size: 11

  # # SUCKY BECAUSE SUPERSLOW. Adds like 2-3 mins in CI. Rife is good enough.
  # opticalflow raft:
  #   type: optical-flow
  #   method: raft
  #   dependencies: []
  #   parameters:
  #     device: ${oc.env:VRE_DEVICE,cpu}
  #     inference_height: 720
  #     inference_width: 1280

  # depth odoflow (raft):
  #   type: depth
  #   method: odo-flow
  #   dependencies: [opticalflow raft]
  #   parameters:
  #     velocities_path: DJI_0956_velocities.npz
  #     linearAngVelCorrection: True
  #     focus_correction: True
  #     cosine_correction_scipy: False
  #     cosine_correction_GD: True
  #     sensor_fov: 75
  #     sensor_width: 3840
  #     sensor_height: 2160
  #     min_depth_meters: 0
  #     max_depth_meters: 400

  # normals svd (raft):
  #   type: normals
  #   method: depth-svd
  #   dependencies: [depth odoflow (raft)]
  #   parameters:
  #     sensor_fov: 75
  #     sensor_width: 3840
  #     sensor_height: 2160
  #     window_size: 11

  # # sucky because slow, but it's good/pretrained
  # depth dpt:
  #   type: depth
  #   method: dpt
  #   dependencies: []
  #   parameters:
  #     device: ${oc.env:VRE_DEVICE,cpu}

  # normals svd (dpt):
  #   type: normals
  #   method: depth-svd
  #   dependencies: [depth dpt]
  #   parameters:
  #     sensor_fov: 75
  #     sensor_width: 3840
  #     sensor_height: 2160
  #     window_size: 11
