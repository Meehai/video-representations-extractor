vre:
  start_frame: ${oc.env:VRE_START_IX}
  end_frame: ${oc.env:VRE_END_IX,null}
  export_npy: True
  export_png: True

representations:
  rgb:
    type: default
    name: rgb
    dependencies: []
    parameters: {}

  hsv:
    type: default
    name: hsv
    dependencies: []
    parameters: {}

  halftone1:
    type: soft-segmentation
    name: python-halftone
    dependencies: []
    parameters:
      sample: 3
      scale: 1
      percentage: 91
      angles: [0, 15, 30, 45]
      antialias: False
      resolution: [240, 426]

  edges canny:
    type: edges
    name: canny
    dependencies: []
    parameters:
      threshold1: 100
      threshold2: 200
      aperture_size: 3
      l2_gradient: True

  softseg kmeans:
    type: soft-segmentation
    name: kmeans
    dependencies: []
    parameters:
      n_clusters: 6
      epsilon: 2
      max_iterations: 10
      attempts: 3

  softseg gb:
    type: soft-segmentation
    name: generalized_boundaries
    dependencies: []
    parameters:
      use_median_filtering: True
      adjust_to_rgb: True
      max_channels: 3

  edges dexined:
    type: edges
    name: dexined
    dependencies: []
    parameters:
      inference_height: 512
      inference_width: 512
    vre_parameters:
      device: ${oc.env:VRE_DEVICE,cpu}

  fastsam(s):
    type: semantic_segmentation
    name: fastsam
    dependencies: []
    parameters:
      variant: fastsam-s
      iou: 0.9
      conf: 0.4
    vre_parameters:
      device: ${oc.env:VRE_DEVICE,cpu}

  depth dpt:
    type: depth
    name: dpt
    dependencies: []
    parameters: {}
    vre_parameters:
      device: ${oc.env:VRE_DEVICE,cpu}

  mask2former:
    type: semantic_segmentation
    name: mask2former
    dependencies: []
    parameters:
      model_id: "47429163_0" # "49189528_1" based on ResNet-50 and "47429163_0" based on SWIN
    vre_parameters:
      device: ${oc.env:VRE_DEVICE,cpu}

  # normals svd (dpt):
  #   type: normals
  #   name: depth-svd
  #   dependencies: [depth dpt]
  #   parameters:
  #     sensor_fov: 75
  #     sensor_width: 3840
  #     sensor_height: 2160
  #     window_size: 11

  # only works if fps is also set (for images) via --frame_rate in cli. For videos, it works just fine.
  # opticalflow rife:
  #   type: optical-flow
  #   name: rife
  #   dependencies: []
  #   parameters:
  #     uhd: False
  #     compute_backward_flow: False
  #   vre_parameters:
  #     device: ${oc.env:VRE_DEVICE,cpu}

  # Quite slow. Same as rife, requires --frame_rate in cli for directory of images.
  # opticalflow raft:
  #   type: optical-flow
  #   name: raft
  #   dependencies: []
  #   parameters:
  #     inference_height: 720
  #     inference_width: 1280
  #   vre_parameters:
  #     device: ${oc.env:VRE_DEVICE,cpu}
